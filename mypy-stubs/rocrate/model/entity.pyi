import datetime
from typing import (
    Any,
    Iterator,
    Mapping,
    Sequence,
    Optional,
    Tuple,
)

from typing_extensions import (
    TypedDict,
    Required,
    NotRequired,
)

EntityRef = TypedDict("EntityRef", {"@id": Required[str]})

from .. import vocabs as vocabs
from ..rocrate import ROCrate
from _typeshed import Incomplete
from collections.abc import MutableMapping

class Entity(MutableMapping[str, Any]):
    crate: ROCrate
    id: str
    def __init__(
        self,
        crate: ROCrate,
        identifier: Optional[Any] = ...,
        properties: Optional[Mapping[str, Any]] = ...,
    ) -> None: ...
    def format_id(self, identifier: Any) -> str: ...
    def properties(self) -> Mapping[str, Any]: ...
    def as_jsonld(self) -> Mapping[str, Any]: ...
    def canonical_id(self) -> str: ...
    def __hash__(self) -> int: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def popitem(self) -> Tuple[str, Any]: ...
    def clear(self) -> None: ...
    # def update(self, **kwargs: Any) -> None: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __contains__(self, value: Any) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    @property
    def type(self) -> str | Sequence[str]: ...
    @property
    def datePublished(self) -> Optional[datetime.datetime]: ...
    @datePublished.setter
    def datePublished(self, value: str | datetime.datetime) -> None: ...
    def delete(self) -> None: ...
    def append_to(self, key: str, value: Any, compact: bool = ...) -> None: ...
