from typing import (
    Any,
    Callable,
    Mapping,
    Optional,
)

from .contextentity import ContextEntity as ContextEntity
from .entity import EntityRef
from ..rocrate import ROCrate

class ComputerLanguage(ContextEntity):
    @property
    def name(self) -> Optional[str]: ...
    @name.setter
    def name(self, name: str) -> None: ...
    @property
    def alternateName(self) -> Optional[str]: ...
    @alternateName.setter
    def alternateName(self, name: str) -> None: ...
    @property
    def identifier(self) -> Optional[str]: ...
    @identifier.setter
    def identifier(self, name: str) -> None: ...
    @property
    def url(self) -> Optional[str | EntityRef]: ...
    @url.setter
    def url(self, url: str | EntityRef) -> None: ...
    @property
    def version(self) -> Optional[str]: ...
    @version.setter
    def version(self, version: str) -> None: ...

def cwl(crate: ROCrate, version: Optional[str] = ...) -> ComputerLanguage: ...
def galaxy(crate: ROCrate, version: Optional[str] = ...) -> ComputerLanguage: ...
def knime(crate: ROCrate, version: Optional[str] = ...) -> ComputerLanguage: ...
def nextflow(crate: ROCrate, version: Optional[str] = ...) -> ComputerLanguage: ...
def snakemake(crate: ROCrate, version: Optional[str] = ...) -> ComputerLanguage: ...
def compss(crate: ROCrate, version: Optional[str] = ...) -> ComputerLanguage: ...
def autosubmit(crate: ROCrate, version: Optional[str] = ...) -> ComputerLanguage: ...

LANG_MAP: Mapping[str, Callable[[ROCrate, Optional[str]], ComputerLanguage]]

def get_lang(
    crate: ROCrate, name: str, version: Optional[str] = ...
) -> ComputerLanguage: ...
